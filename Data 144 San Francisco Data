{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Data 144 San Francisco Data","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"eht24Qp3NL1O","colab_type":"text"},"source":["**Datasets**\n","\n","Reviews: Detailed Review Data for listings in San Francisco\n","\n","Listing: Detailed Listings data for San Francisco\n","\n","(data from 2018-2019)\n","\n","vv download datasets here"]},{"cell_type":"markdown","metadata":{"id":"WaoSYbtIRRZp","colab_type":"text"},"source":["**Goal: predicting Airbnb prices for September 2019**"]},{"cell_type":"markdown","metadata":{"id":"H4hWTHXHNHbp","colab_type":"text"},"source":["**Pre-processing**\n","\n","Columns to use:\n","\n","Listings\n","* id\n","* last_scraped\n","* name\n","* summary \n","* space\n","* description\n","* neighborhood_overview \n","* transit\n","* house_rules (length, number of no's,fine, using vader sentiment) \n","* host_id\n","* neighbourhood_cleansed (one-hot)\n","* property_type\n","* room_type\n","* accommodates\n","* bathrooms\n","* bedrooms\n","* beds\n","* bed_type(one-hot)\n","* amenities (one-hot)\n","* price\n","* weekly_price (is option?, \\$ saved vs price)\n","* monthly_price (is option?, \\$ saved vs price)\n","* security_deposit\n","* guest_included\n","* extra_people\n","* minimum_nights\n","* maximum_nights\n","* availability_30\n","* number_of_reviews\n","* number_of_reviews_ltm\n","* review_scores_ratings (is it better to break it down?)\n","* cancellation_policy (one-hot)\n","\n","\n","\n","New variables:\n","\n","*   VADER sentiment analysis: \n","    *   summary\n","    *   space\n","    *   description\n","    *   neighborhood_overview\n","    *   house_rules\n","\n","*   host score (subjective, but explain logic behind how score is determined):\n","    *   superhost\n","    *   response rate\n","    *   response time\n","    *   verified identity\n","    *   host_since\n","    *   written things in host_about\n","\n","* amenities score\n","    *   available amenities\n","* avg_review_sentiment, join by listing_id\n","  *  comments (vader sentiment analysis)\n","* sd_review_sentiment, join by listing_id\n","  * comments (vader sentiment analysis)\n","  \n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"qFR4YpSGPN2I","colab_type":"text"},"source":["If predicting September of 2019 prices, is it better to predict using:\n","\n","1.   all of 2018\n","2.   September 2018 (same month, 1yr ago)\n","3.   August 2019\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HWECyIvaPr08","colab_type":"text"},"source":["Summary of listing:\n","\n","run sentiment analysis\n","\n","test for similar wordings in listing summary v. listing reviews\n","\n"]},{"cell_type":"code","metadata":{"id":"af3IUq5eAN9q","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CwSpNhlj_IXq","colab_type":"code","outputId":"b1e393bc-2c04-4d0c-f97e-1013d9884b41","executionInfo":{"status":"ok","timestamp":1574318117866,"user_tz":480,"elapsed":22649,"user":{"displayName":"Chloe Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB1HX4kT2w3nTS8x9HEJw_vhOP03Wxa1QUF20aSlg=s64","userId":"07432667934392179751"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cm6juinM_JK4","colab_type":"code","colab":{}},"source":["root_path = 'gdrive/My Drive/airbnb_project/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eZILIQR__-o0","colab_type":"code","outputId":"91210165-0039-499a-e145-2041b026e5c2","executionInfo":{"status":"ok","timestamp":1574318131576,"user_tz":480,"elapsed":2500,"user":{"displayName":"Chloe Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB1HX4kT2w3nTS8x9HEJw_vhOP03Wxa1QUF20aSlg=s64","userId":"07432667934392179751"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["!unzip 'gdrive/My Drive/airbnb_project/airbnb_data.zip'"],"execution_count":0,"outputs":[{"output_type":"stream","text":["unzip:  cannot find or open gdrive/My Drive/airbnb_project/airbnb_data.zip, gdrive/My Drive/airbnb_project/airbnb_data.zip.zip or gdrive/My Drive/airbnb_project/airbnb_data.zip.ZIP.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5dME0SqvApWy","colab_type":"code","outputId":"cd9bb421-7c12-4099-bad4-ddc4e2c3cf63","executionInfo":{"status":"error","timestamp":1574318123758,"user_tz":480,"elapsed":437,"user":{"displayName":"Chloe Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB1HX4kT2w3nTS8x9HEJw_vhOP03Wxa1QUF20aSlg=s64","userId":"07432667934392179751"}},"colab":{"base_uri":"https://localhost:8080/","height":426}},"source":["oct18_list = pd.read_csv('listings10_18.csv')\n","oct19_list = pd.read_csv('listings10_19.csv')\n","sept19_list = pd.read_csv('listings9_19.csv')\n","reviews = pd.read_csv('reviews10_19.csv')\n"],"execution_count":0,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-3f0854130500>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0moct18_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'listings10_18.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0moct19_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'listings10_19.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msept19_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'listings9_19.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mreviews\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'reviews10_19.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    683\u001b[0m         )\n\u001b[1;32m    684\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 685\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1134\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1135\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1136\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1915\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1917\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1918\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'listings10_18.csv' does not exist: b'listings10_18.csv'"]}]},{"cell_type":"markdown","metadata":{"id":"2nauu6-Xqpo-","colab_type":"text"},"source":["one hot encoding"]},{"cell_type":"code","metadata":{"id":"6yYZMfhlq5PS","colab_type":"code","colab":{}},"source":["from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n","from sklearn.feature_extraction import DictVectorizer"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"F14FEQuBA11y","colab_type":"code","outputId":"0f8fe02d-39ff-4ad1-bee8-967c83486d1b","executionInfo":{"status":"error","timestamp":1574318088423,"user_tz":480,"elapsed":700,"user":{"displayName":"Chloe Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mB1HX4kT2w3nTS8x9HEJw_vhOP03Wxa1QUF20aSlg=s64","userId":"07432667934392179751"}},"colab":{"base_uri":"https://localhost:8080/","height":232}},"source":["#bed_type one-hot transformation\n","\n","bed_type = LabelEncoder()\n","bed_type.fit(['Real Bed', 'Futon', 'Airbed', 'Pull-out Sofa', 'Couch'])\n","oct18_list['bed_type_trans'] = bed_type.transform(oct18_list['bed_type'])\n","oct19_list['bed_type_trans'] = bed_type.transform(oct19_list['bed_type'])\n","sept19_list['bed_type_trans'] = bed_type.transform(sept19_list['bed_type'])"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-32b07e47ea86>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mbed_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLabelEncoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mbed_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Real Bed'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Futon'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Airbed'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Pull-out Sofa'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Couch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0moct18_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bed_type_trans'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbed_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moct18_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bed_type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0moct19_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bed_type_trans'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbed_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moct19_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bed_type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msept19_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bed_type_trans'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbed_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msept19_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bed_type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'oct18_list' is not defined"]}]},{"cell_type":"code","metadata":{"id":"YpL9r9XtqtYf","colab_type":"code","colab":{}},"source":["#cancellation_policy one-hot transformation\n","\n","cancellation_policy = LabelEncoder()\n","cancellation_policy.fit(['moderate', 'strict_14_with_grace_period', 'flexible',\n","       'super_strict_30', 'strict', 'super_strict_60'])\n","oct18_list['cancellation_policy_trans'] = cancellation_policy.transform(oct18_list['cancellation_policy'])\n","oct19_list['cancellation_policy_trans'] = cancellation_policy.transform(oct19_list['cancellation_policy'])\n","sept19_list['cancellation_policy_trans'] = cancellation_policy.transform(sept19_list['cancellation_policy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZhEavyiarBTD","colab_type":"code","colab":{}},"source":["#neighbourhood_cleansed one-hot transformation\n","\n","neighbourhood_cleansed = LabelEncoder()\n","neighbourhood_cleansed.fit(['Western Addition', 'Inner Sunset', 'Bernal Heights',\n","       'Haight Ashbury', 'Mission', 'Potrero Hill', 'Nob Hill',\n","       'Downtown/Civic Center', 'Castro/Upper Market', 'South of Market',\n","       'Noe Valley', 'Outer Richmond', 'Presidio Heights', 'Glen Park',\n","       'Ocean View', 'Pacific Heights', 'Financial District',\n","       'Twin Peaks', 'Russian Hill', 'Outer Sunset', 'Marina',\n","       'Inner Richmond', 'Excelsior', 'Seacliff', 'Chinatown',\n","       'West of Twin Peaks', 'Bayview', 'North Beach', 'Diamond Heights',\n","       'Outer Mission', 'Parkside', 'Lakeshore', 'Crocker Amazon',\n","       'Golden Gate Park', 'Visitacion Valley', 'Presidio',\n","       'Treasure Island/YBI'])\n","oct18_list['neighbourhood_cleansed_trans'] = neighbourhood_cleansed.transform(oct18_list['neighbourhood_cleansed'])\n","oct19_list['neighbourhood_cleansed_trans'] = neighbourhood_cleansed.transform(oct19_list['neighbourhood_cleansed'])\n","sept19_list['neighbourhood_cleansedy_trans'] = neighbourhood_cleansed.transform(sept19_list['neighbourhood_cleansed'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"srSWoKIWrBV0","colab_type":"code","colab":{}},"source":["#count the number of amenities of each row\n","\n","oct18_list['len_amenities'] = oct18_list['amenities'].apply(lambda x: len(x.split(',')))\n","oct19_list['len_amenities'] = oct19_list['amenities'].apply(lambda x: len(x.split(',')))\n","sept19_list['len_amenities'] = sept19_list['amenities'].apply(lambda x: len(x.split(',')))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LZwgKdM7rBYt","colab_type":"code","colab":{}},"source":["#create columns by picking some amenities\n","\n","oct18_list['tv_trans'] = oct18_list['amenities'].str.contains('TV')\n","oct18_list['internet_trans'] = oct18_list['amenities'].str.contains('Internet')\n","oct18_list['wifi_trans'] = oct18_list['amenities'].str.contains('Wifi')\n","oct18_list['kitchen_trans'] = oct18_list['amenities'].str.contains('Kitchen')\n","oct18_list['heating_trans'] = oct18_list['amenities'].str.contains('Heating')\n","oct18_list['air_conditioning_trans'] = oct18_list['amenities'].str.contains('Air conditioning')\n","oct18_list['dryer_trans'] = oct18_list['amenities'].str.contains('Dryer')\n","oct18_list['24hr_checkin_trans'] = oct18_list['amenities'].str.contains('24-hour check-in')\n","oct18_list['self_checkin_trans'] = oct18_list['amenities'].str.contains('Self check-in')\n","oct18_list['breakfast_trans'] = oct18_list['amenities'].str.contains('Breakfast')\n","oct18_list['washer_trans'] = oct18_list['amenities'].str.contains('Washer')\n","oct18_list['smoke_detector_trans'] = oct18_list['amenities'].str.contains('Smoke detector')\n","oct18_list['host_greets_trans'] = oct18_list['amenities'].str.contains('Host greets you')\n","oct18_list['hot_water_trans'] = oct18_list['amenities'].str.contains('Hot water')\n","oct18_list['parking_trans'] = oct18_list['amenities'].str.contains('parking')\n","oct18_list['balcony_trans'] = oct18_list['amenities'].str.contains('Patio or balcony')\n","oct18_list['garden_trans'] = oct18_list['amenities'].str.contains('Garden or backyard')\n","oct18_list['cooking_trans'] = oct18_list['amenities'].str.contains('Cooking basics')\n","oct18_list['BBQ_trans'] = oct18_list['amenities'].str.contains('BBQ grill')\n","oct18_list['oven_trans'] = oct18_list['amenities'].str.contains('Oven')\n","oct18_list['stove_trans'] = oct18_list['amenities'].str.contains('Stove')\n","oct18_list['hairdryer_trans'] = oct18_list['amenities'].str.contains('Hair dryer')\n","oct18_list['dishwasher_trans'] = oct18_list['amenities'].str.contains('Dishwasher')\n","oct18_list['fridge_trans'] = oct18_list['amenities'].str.contains('Refrigerator')\n","oct18_list['coffeemaker_trans'] = oct18_list['amenities'].str.contains('Coffee maker')\n","oct18_list['microwave_trans'] = oct18_list['amenities'].str.contains('Microwave')\n","oct18_list['private_bath_trans'] = oct18_list['amenities'].str.contains('Private bathroom')\n","oct18_list['laptop_friendly_trans'] = oct18_list['amenities'].str.contains('Laptop friendly workspace')\n","oct18_list['essentials_trans'] = oct18_list['amenities'].str.contains('Essentials')\n","oct18_list['lock_trans'] = oct18_list['amenities'].str.contains('Lock on bedroom door')\n","oct18_list['dishes_trans'] = oct18_list['amenities'].str.contains('Dishes and silverware')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kwzqO2K_rNdT","colab_type":"code","colab":{}},"source":["oct19_list['tv_trans'] = oct19_list['amenities'].str.contains('TV')\n","oct19_list['internet_trans'] = oct19_list['amenities'].str.contains('Internet')\n","oct19_list['wifi_trans'] = oct19_list['amenities'].str.contains('Wifi')\n","oct19_list['kitchen_trans'] = oct19_list['amenities'].str.contains('Kitchen')\n","oct19_list['heating_trans'] = oct19_list['amenities'].str.contains('Heating')\n","oct19_list['air_conditioning_trans'] = oct19_list['amenities'].str.contains('Air conditioning')\n","oct19_list['dryer_trans'] = oct19_list['amenities'].str.contains('Dryer')\n","oct19_list['24hr_checkin_trans'] = oct19_list['amenities'].str.contains('24-hour check-in')\n","oct19_list['self_checkin_trans'] = oct19_list['amenities'].str.contains('Self check-in')\n","oct19_list['breakfast_trans'] = oct19_list['amenities'].str.contains('Breakfast')\n","oct19_list['washer_trans'] = oct19_list['amenities'].str.contains('Washer')\n","oct19_list['smoke_detector_trans'] = oct19_list['amenities'].str.contains('Smoke detector')\n","oct19_list['host_greets_trans'] = oct19_list['amenities'].str.contains('Host greets you')\n","oct19_list['hot_water_trans'] = oct19_list['amenities'].str.contains('Hot water')\n","oct19_list['parking_trans'] = oct19_list['amenities'].str.contains('parking')\n","oct19_list['balcony_trans'] = oct19_list['amenities'].str.contains('Patio or balcony')\n","oct19_list['garden_trans'] = oct19_list['amenities'].str.contains('Garden or backyard')\n","oct19_list['cooking_trans'] = oct19_list['amenities'].str.contains('Cooking basics')\n","oct19_list['BBQ_trans'] = oct19_list['amenities'].str.contains('BBQ grill')\n","oct19_list['oven_trans'] = oct19_list['amenities'].str.contains('Oven')\n","oct19_list['stove_trans'] = oct19_list['amenities'].str.contains('Stove')\n","oct19_list['hairdryer_trans'] = oct19_list['amenities'].str.contains('Hair dryer')\n","oct19_list['dishwasher_trans'] = oct19_list['amenities'].str.contains('Dishwasher')\n","oct19_list['fridge_trans'] = oct19_list['amenities'].str.contains('Refrigerator')\n","oct19_list['coffeemaker_trans'] = oct19_list['amenities'].str.contains('Coffee maker')\n","oct19_list['microwave_trans'] = oct19_list['amenities'].str.contains('Microwave')\n","oct19_list['private_bath_trans'] = oct19_list['amenities'].str.contains('Private bathroom')\n","oct19_list['laptop_friendly_trans'] = oct19_list['amenities'].str.contains('Laptop friendly workspace')\n","oct19_list['essentials_trans'] = oct19_list['amenities'].str.contains('Essentials')\n","oct19_list['lock_trans'] = oct19_list['amenities'].str.contains('Lock on bedroom door')\n","oct19_list['dishes_trans'] = oct19_list['amenities'].str.contains('Dishes and silverware')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BV6SP4OxrNlP","colab_type":"code","colab":{}},"source":["sept19_list['tv_trans'] = sept19_list['amenities'].str.contains('TV')\n","sept19_list['internet_trans'] = sept19_list['amenities'].str.contains('Internet')\n","sept19_list['wifi_trans'] = sept19_list['amenities'].str.contains('Wifi')\n","sept19_list['kitchen_trans'] = sept19_list['amenities'].str.contains('Kitchen')\n","sept19_list['heating_trans'] = sept19_list['amenities'].str.contains('Heating')\n","sept19_list['air_conditioning_trans'] = sept19_list['amenities'].str.contains('Air conditioning')\n","sept19_list['dryer_trans'] = sept19_list['amenities'].str.contains('Dryer')\n","sept19_list['24hr_checkin_trans'] = sept19_list['amenities'].str.contains('24-hour check-in')\n","sept19_list['self_checkin_trans'] = sept19_list['amenities'].str.contains('Self check-in')\n","sept19_list['breakfast_trans'] = sept19_list['amenities'].str.contains('Breakfast')\n","sept19_list['washer_trans'] = sept19_list['amenities'].str.contains('Washer')\n","sept19_list['smoke_detector_trans'] = sept19_list['amenities'].str.contains('Smoke detector')\n","sept19_list['host_greets_trans'] = sept19_list['amenities'].str.contains('Host greets you')\n","sept19_list['hot_water_trans'] = sept19_list['amenities'].str.contains('Hot water')\n","sept19_list['parking_trans'] = sept19_list['amenities'].str.contains('parking')\n","sept19_list['balcony_trans'] = sept19_list['amenities'].str.contains('Patio or balcony')\n","sept19_list['garden_trans'] = sept19_list['amenities'].str.contains('Garden or backyard')\n","sept19_list['cooking_trans'] = sept19_list['amenities'].str.contains('Cooking basics')\n","sept19_list['BBQ_trans'] = sept19_list['amenities'].str.contains('BBQ grill')\n","sept19_list['oven_trans'] = sept19_list['amenities'].str.contains('Oven')\n","sept19_list['stove_trans'] = sept19_list['amenities'].str.contains('Stove')\n","sept19_list['hairdryer_trans'] = sept19_list['amenities'].str.contains('Hair dryer')\n","sept19_list['dishwasher_trans'] = sept19_list['amenities'].str.contains('Dishwasher')\n","sept19_list['fridge_trans'] = sept19_list['amenities'].str.contains('Refrigerator')\n","sept19_list['coffeemaker_trans'] = sept19_list['amenities'].str.contains('Coffee maker')\n","sept19_list['microwave_trans'] = sept19_list['amenities'].str.contains('Microwave')\n","sept19_list['private_bath_trans'] = sept19_list['amenities'].str.contains('Private bathroom')\n","sept19_list['laptop_friendly_trans'] = sept19_list['amenities'].str.contains('Laptop friendly workspace')\n","sept19_list['essentials_trans'] = sept19_list['amenities'].str.contains('Essentials')\n","sept19_list['lock_trans'] = sept19_list['amenities'].str.contains('Lock on bedroom door')\n","sept19_list['dishes_trans'] = sept19_list['amenities'].str.contains('Dishes and silverware')"],"execution_count":0,"outputs":[]}]}